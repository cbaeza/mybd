buildscript {
    ext {
        springBootVersion = '2.1.2.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id 'java'
    id 'application'
    id "org.flywaydb.flyway" version "5.2.4"
}

group = "com.cbaeza"
version = "0.1-SNAPSHOT"

sourceCompatibility = 1.8
targetCompatibility = 1.8

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

repositories {
    mavenCentral()
}
dependencies {
    /**
     * IMPLEMENTATION
     */
    implementation 'org.springframework.boot:spring-boot-starter-web:2.1.2.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-devtools'

    implementation 'com.google.guava:guava:27.0.1-jre'
    implementation 'org.jooq:jooq:3.11.9'
    implementation 'org.jooq:jooq:3.11.9'
    /**
     * RUNTIME
     */
    runtime 'com.h2database:h2:1.4.197'
    /**
     * TEST
     */
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.springframework.boot:spring-boot-starter-test:2.1.2.RELEASE'
    testImplementation 'io.rest-assured:rest-assured:3.3.0'
}


jar {
    manifest {
        attributes 'Implementation-Title': 'MyDB App in java with gradle and JOOq',
                'Implementation-Version': project.version,
                'Created-By': 'Carlos Baeza',
                'Main-Class': 'com.cbaeza.mydb.App'
    }
    println ">>>> manifest.attibutes: $manifest.attributes"
}

// Define the main class for the application
mainClassName = 'com.cbaeza.mydb.App'

task('welcome') {
    logger.info "***********************************************"
    logger.info "*"
    logger.info "*    Mybd"
    logger.info "*"
    logger.info "***********************************************"
}

task('buildDBEntities').doFirst {
    logger.info "***********************************************"
    logger.info "   BUILD DB ENTITIES -> jooq"
    logger.info "   project.flyway.driver -> ${project.ext['flyway.driver']}"
    logger.info "   project.flyway.url -> ${project.ext['flyway.url']}"
    logger.info "   project.flyway.user -> ${project.ext['flyway.user']}"
    logger.info "***********************************************"

    apply plugin: 'java'
    // Use your favourite XML builder to construct the code generation configuration file
    // ----------------------------------------------------------------------------------
    def writer = new StringWriter()
    def xml = new groovy.xml.MarkupBuilder(writer)
            .configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.11.0.xsd') {
        jdbc() {
            driver(project.ext['flyway.driver'])
            url(project.ext['flyway.url'])
            user(project.ext['flyway.user'])
            password(project.ext['flyway.password'])
        }
        generator() {
            database() {
            }

            // Watch out for this caveat when using MarkupBuilder with "reserved names"
            // - https://github.com/jOOQ/jOOQ/issues/4797
            // - http://stackoverflow.com/a/11389034/521799
            // - https://groups.google.com/forum/#!topic/jooq-user/wi4S9rRxk4A
            generate([:]) {
                pojos true
                daos true
            }
            target() {
                packageName('com.cbaeza.jooq.gradle.db')
                directory('src/main/java')
            }
        }
    }

    // Run the code generator
    // ----------------------
    org.jooq.codegen.GenerationTool.generate(writer.toString())
}

project.gradle.taskGraph.whenReady({
    logger.info "***********************************************"
    logger.info "READY"
    logger.info "***********************************************"
})

project.gradle.taskGraph.beforeTask({
    logger.info "***********************************************"
    logger.info "BEFORE TASKS"
    logger.info "***********************************************"
})




